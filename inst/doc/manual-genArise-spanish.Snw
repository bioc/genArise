%\VignetteIndexEntry{genAriseGUI Vignette}
%\VignetteDepends{}
%\VignetteKeywords{microarray analyzer GUI}
%\VignettePackage{genAriseGUI}
\documentclass[12pt]{article}
\topmargin=0in
\oddsidemargin 0.0in
\evensidemargin 0.0in
\usepackage{hyperref}
\usepackage{url}
\usepackage{graphicx}
\usepackage{fancyhdr}

\pagestyle{fancy}
\headheight 35pt 
\fancyhead[R]{\Large{\bf{genArise}}} %Especifico

\title{El paquete genArise}
\author{Ana Patricia G\'omez May\'en\\ Gustavo Corral Guill\'e\\ Lina Riego Ruiz\\ Gerardo Coello Couti\~no}

\begin{document}

\maketitle
\begin{center}\textbf{Agradecimientos}\end{center}
\begin{small}Agradecemos a la Unidad de Microarreglos del Instituto de Fisiolog\'ia Celular y en particular al Dr. Jorge Ram\'irez Salcedo por el apoyo brindado. De la misma manera a Emmanuel Plata Alvarado, ya que con su apoyo este proyecto se ha mantenido en constante desarrollo.
\end{small}
\section{Introducci\'on}
genArise es un paquete que contiene funciones espec\'ificas para desarrollar un an\'alisis de los datos obtenidos de un microarreglo con la finalidad de seleccionar los genes que est\'an siendo expresados significativamente entre muestras. Antes de este an\'alisis, genArise ejecuta cierto n\'umero de transformaciones sobre los datos para eliminar medidas de baja calidad y para ajustar las intensidades medidas para facilitar comparaciones.\\

Primero que nada, debes instalar el sistema R. La \'ultima versi\'on liberada es la 2.0.1 y el archivo de instalaci\'on puede obtenerse mediante el CRAN, que es una colecci\'on de sitios de internet que guardan el mismo material, el cual consiste en las distribuciones de R, as\'i como extensiones y documentaci\'on. El sitio principal del CRAN se encuentra en la direcci\'on URL 
\url{http://cran.R-project.org/}.\\

Posteriormente, necesitas instalar los paquetes \texttt{tkrplot}, \texttt{locfit} y \texttt{xtable} de los cuales depende genArise. Esto se puede hacer como sigue desde el prompt de R:

\begin{Scode}
> install.packages(c("locfit","tkrplot","xtable"))
\end{Scode}

Con esta funci\'on de R autom\'aticamente se descargar\'an y se instalar\'an los tres paquetes desde el CRAN, si se cuenta con una conexi\'on de red. En caso contrario deber\'as descargar los tres paquetes del CRAN para tu plataforma (Linux o Windows) e instalarlos con el script \texttt{R CMD INSTALL nombre\_del\_paquete} para linux y \texttt{Rcmd INSTALL nombre\_del\_paquete} para windows. Con este script deber\'as tambi\'en instalar genArise\footnote{Para mayor informaci\'on sobre la instalaci\'on descargue los manuales de la siguiente direcci\'on: \url{http://biotux.ifc.unam.mx/~pgomez/genArise}}.\\

La interfaz gr\'afica de genArise usa algunos componentes que vienen en los paquetes BWidget e Img, ninguno de los cuales est\'a incluido por default en la instalaci\'on de R. Si se est\'a usando Windows necesitas instalar ActiveTcl 8.4.x desde \url{http://aspn.activestate.com/ASPN/Downloads/ActiveTcl/}. Despu\'es de instalar ActiveTcl, se debe definir la variable de ambiente MY\_TCLTK igual a una cadena no vac\'{\i}a, por ejemplo: \texttt{MY\_TCLTK=Yes} para indicarle al sistema que se desea usar una instalaci\'on distinta de Tcl/Tk. Debes tambi\'en definir la variable TCL\_LIBRARY igual a la ruta d\'onde est\'an los DLLs de Tcl en tu m\'aquina, por ejemplo: \texttt{TCL\_LIBRARY=C:/Tcl/lib/tcl8.4}.\\

Si el sistema operativo sobre el cual se va a instalar genArise es linux, debes instalar los rpms Tcl and Tk 8.3 o posterior (los cuales puedes instalar desde el disco de instalaci\'on de linux), despu\'es descarga BWidget de \url{http://sourceforge.net/projects/tcllib/} descomprimi\'endolo con el comando \texttt{gunzip} en /usr/lib, luego utiliza el comando \texttt{tar -xvf} sobre el archivo .tar. Debes descargar tambi\'en tkimg1.3 (esta es la versi\'on para tcl y tk 8.3) que puedes buscar en \url{http://sourceforge.net} y  descompr\'{\i}melo con el comando \texttt{gunzip} dentro de /usr/lib/ y luego utiliza el comando \texttt{tar -xvf} sobre el archivo .tar. Luego, es probable que debas copiar el directorio /usr/lib/tkimg1.3/Img/exec\_prefix/lib/Img a /usr/lib/.\\

\section{Iniciando genArise}

Una vez que el paquete genArise haya sido instalado, para trabajar con \'el debes cargar genArise en el ambiente de trabajo, esto es, una vez en R teclear la siguiente instrucci\'on:

<<>>=
library(genArise)
@ Ya cargado el paquete puedes utilizar cualquiera de las funciones de genArise y proceder a realizar el an\'alisis de los datos de un microarreglo. genArise contiene funciones que se pueden ejecutar desde el prompt de R en cada paso del an\'alisis; sin embargo, existe tambi\'en una interfaz gr\'afica de usuario para facilitar el uso de todas las funciones en el paquete, la cual ser\'a descrita m\'as adelante.

\section{Las Funciones del paquete genArise\label{sec1}}


Para empezar el an\'alisis debes leer los datos contenidos en en el archivo con los resultados del microarreglo, para leer este archivo de entrada genArise cuenta con la funci\'on \texttt{read.spot}. Esta funci\'on regresa un objeto de la clase Spot, esto es una estructura con  el nombre del archivo sin extensi\'on y los datos con los que se har\'a el an\'alisis (Intensidades, backgrounds e identificadores) dentro de una tabla. Esta funci\'on regresa un objeto de este tipo ya que muchas funciones de genArise que hacen alguna transformaci\'on en los datos requieren de esta clase de estructuras. La sintaxis de esta funci\'on es:

\begin{Scode}
> my.spot <- read.spot( file.name, cy3 = 1, cy5 = 2, 
  bg.cy3 = 3, bg.cy5 = 4, ids = 5, header = FALSE, 
  sep = "\t", is.ifc = FALSE)	
\end{Scode}

\begin{Soutput}
Resultado: Un objeto de la clase spot llamado my.spot
\end{Soutput}

La descripci\'on de cada uno de los argumentos de todas las funciones descritas de aqu\'{\i} en adelante se explican a detalle en el manual: \\
\begin{center}
 \url{http://biotux.ifc.unam.mx/~pgomez/genArise.pdf}\\
\end{center}
No se mostrar\'a un ejemplo de la lectura de los datos desde el archivo de entrada, pero solo se debe seguir la sintaxis descrita en el manual para poder crear un objeto de la clase spot a trav\'es de la funci\'on \texttt{read.spot}; sin embargo vamos a ejemplificar el uso de cada una de las funciones de genArise que sirven para realizar el an\'alisis de los datos y las cuales requieren este tipo de objetos con un subconjunto de datos creado anteriormente y al que se le ha denominado Simon.\\

Simon, como se dijo anteriormente, es un objeto de la clase spot creado a trav\'es de la funci\'on \texttt{read.spot} que est\'a inclu\'{\i}do en la distribuci\'on base de genArise. Este objeto se puede cargar mediante la siguiente instrucci\'on:

<<>>=
data(Simon)
ls()
@

\begin{Soutput}
Resultado: Se ha cargado en el ambiente de trabajo un 
objeto de la clase Spot.
\end{Soutput}

\subsection{Gr\'aficas diagn\'ostico}

Previo a ejecutar cualquier funci\'on que realice alg\'un tipo de transformaci\'on sobre los datos, \'estos pueden ser visualizados con la funci\'on \texttt{imageLimma}. Esta funci\'on muestra en pantalla una gr\'afica en la escala de colores rojo-verde (Control-Experimento) de las intensidades de cada spot en el microarreglo. Ver figura \ref{fig1}.\\

Los argumentos de la funci\'on \texttt{imageLimma} var\'{\i}an dependiendo de los datos que se quieran visualizar. La funci\'on \texttt{imageLimma} est\'a completamente basada en la funci\'on \texttt{imageplot} del paquete \texttt{limma}. \footnote{\textit{Gordon K. Smyth (2004) \textquotedblleft Linear Models and Empirical Bayes Methods for Assessing Differential Expression in Microarray Experiments \textquotedblright, Statistical Applications in Genetics and Molecular Biology: Vol. 3: No. 1, Article 3. \url{http://www.bepress.com/sagmb/vol3/iss1/art3}}}\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
datos <- attr(Simon, "spotData")
M <- log(datos$Cy3, 2) - log(datos$Cy5, 2)
imageLimma(M, 23, 24, 2, 2)
@
\caption{Gr\'afica en escala rojo-verde.\label{fig1}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> datos <- attr(Simon, "spotData")# Obtenemos los datos del spot
> M <- log(datos$Cy3, 2) - log(datos$Cy5, 2)
> imageLimma(z = M, row = 23, column = 24, meta.row = 2, 
  meta.column = 2, low = NULL, high = NULL)
\end{Scode}

\begin{Soutput}
Resultado: Gr\'afica en escala rojo-verde
\end{Soutput}


De la misma manera como se puede graficar la escala de colores rojo-verde de cada spot en el microarreglo, tambi\'en es posible graficar el background de cada una de las intensidades por separado. Ver figura \ref{fig2} y \ref{fig3}.\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
datos <- attr(Simon, "spotData")
R <- log(datos$BgCy3, 2)
imageLimma(R, 23, 24, 2, 2, high = "red", low = "white")
@
\caption{Gr\'afica del background del control (Cy3) \label{fig2}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> datos <- attr(Simon, "spotData")# Obtenemos los datos del spot
> R <- log(datos$BgCy3, 2)
> imageLimma(z = R, row = 23, column = 24, meta.row = 2, 
  meta.column = 2, low = "white", high = "red")
\end{Scode}

\begin{Soutput}
Resultado: Gr\'afica del background del Control (Cy3)
\end{Soutput}

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
datos <- attr(Simon, "spotData")
G <- log(datos$BgCy5, 2)
imageLimma(G, 23, 24, 2, 2, low = "white", high = "green")
@
\caption{Gr\'afica del background del experimento (Cy5). \label{fig3}}	
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> datos <- attr(Simon, "spotData")# Obtenemos los datos del Spot
> G <- log(datos$BgCy5, 2)
> imageLimma(z = G, row = 23, column = 24, meta.row = 2, 
  meta.column = 2, low = "white", high = "green")
\end{Scode}

\begin{Soutput}
Resultado: Gr\'afica del backgroun del experimento (Cy5)
\end{Soutput}


Con las gr\'aficas anteriores se tiene una vista previa de los datos originales (sin alguna transformaci\'on en ellos). Es importante se\~nalar que ninguna de estas gr\'aficas reemplaza a la imagen TIFF del arreglo original.
\\

En algunas ocasiones, despu\'es de  aplicar alguna transformaci\'on sobre los datos, es necesario graficar los resultados. Para ello genArise cuenta con tres funciones de graficaci\'on: R vs I (Ver figura \ref{fig4}), M vs A (Ver figura \ref{fig5}) y Cy3 vs Cy5 (Ver figura \ref{fig6}). Cada una de estas funciones recibe un objeto de la clase spot y muestra en pantalla la gr\'afica correspondiente.


\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
ri.plot(Simon)
@
\caption{Gr\'afica R vs I. \label{fig4}}	
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> ri.plot(Simon)
\end{Scode}
\begin{Soutput}
Resultado: Gr\'afica R vs I. Ver Figura 4.
\end{Soutput}
\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
ma.plot(Simon)
@
\caption{Gr\'afica M vs A. \label{fig5}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> ma.plot(Simon)
\end{Scode}
\begin{Soutput}
Resultado:Gr\'afica M vs A. Ver Figura 5.
\end{Soutput}
\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
cys.plot(Simon)
@
\caption{Gr\'afica Cy3 vs Cy5. \label{fig6}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> cys.plot(Simon)
\end{Scode}
\begin{Soutput}
Resultado: Gr\'afica Cy3 vs Cy5. Ver Figura 6.
\end{Soutput}

Hasta este momento no hemos mencionado las funciones de genArise que hacen alguna transformaci\'on sobre los datos, todas las funciones descritas anteriormente s\'olo nos permiten visualizar \'estos de diferentes maneras.\\

\subsection{Funciones de transformaci\'on}

En este apartado se explicar\'a el uso de diferentes funciones de transformaci\'on que contiene el paquete genArise.  Hay que mencionar que todas las funciones que van a ser descritas en este apartado s\'olo regresan un nuevo objeto y, no necesariamente, modifican el objeto con el que se est\'a trabajando, siempre y cuando, el resultado de cada una de las funciones se guarde en un nuevo objeto con nombre distinto al que se utiilza como  argumento.\\

\subsubsection{Correcci\'on del background}

La primera funci\'on que vamos a describir es \texttt{bg.correct}. Esta funci\'on hace la correcci\'on del background, simplemente restando a cada valor de la intensidad (Cy3 o Cy5) el valor del background correspondiente a cada una, por cada spot en el microarreglo. Ver Figura \ref{fig7}.\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
c.spot <- bg.correct(Simon)
ri.plot(c.spot)
@
\caption{Gr\'afica R vs I de los datos con la correcci\'on del background. \label{fig7}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> c.spot <- bg.correct(Simon)
> ri.plot(c.spot)
\end{Scode}

\begin{Soutput}
Argumentos: La funci\'on \texttt{bg.correct} recibe un objeto de la clase 
spot al cual se le va a hacer la  correcci\'on del background
Resultado: El resultado es otro objeto de la clase spot, en donde los datos 
ya tienen el background corregido. Para poder ver c\'omo se afectan los datos, 
en este ejemplo, hacemos la gr\'afica del resultado.
\end{Soutput}

\subsubsection{Normalizaci\'on de los datos}

La normalizaci\'on de los datos se puede aplicar con dos m\'etodos: haciendo la normalizaci\'on por grids o haciendo simplemente una normalizaci\'on global sobre todos los datos del microarreglo. Para cada uno de estos m\'etodos existe una funci\'on diferente y pueden regresar resultados distintos a\'un si se le pasa como argumento el mismo objeto de la clase Spot. Hay que mencionar que la normalizaci\'on por grids solo puede ser utilizada si los datos correspondientes a \texttt{todos} los spots en el microarreglo est\'an presentes en el objeto al cual se le aplicar\'a la transformaci\'on. En ambos m\'etodos de la normalizaci\'on, los datos de los spots que tengan un valor de R igual a cero son eliminados.\\

La normalizaci\'on por grids se ejecuta mediante la funci\'on \texttt{grid.norm} y es necesario indicar las dimensiones de cada uno de los subgrids que conforman el microarreglo (columnas y renglones). Ver figura \ref{fig8}.\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
n.spot <- grid.norm(mySpot = Simon, nr = 23, nc = 24)
ri.plot(n.spot)
@
\caption{Gr\'afica R vs I de los datos normalizados por grid.\label{fig8}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> n.spot <- grid.norm(mySpot = Simon, nr = 23, nc = 24)
> ri.plot(n.spot)
\end{Scode}

\begin{Soutput}
Argumentos: Un objeto de la clase Spot y las dimensiones de los subgrids 
que conforman el microarreglo: renglones (nr)  y columnas (nc).
Resultado: Un objeto de la clase Spot con los datos normalizados.
Para poder ver c\'omo afecta a los datos esta transformaci\'on, graficamos el 
resultado.
\end{Soutput}

La otra funci\'on de llama \texttt{global.norm} y ejecuta una normalizaci\'on global sobre los datos, esta funci\'on solo necesita como argumento el objeto de la clase Spot al cual se le va a aplicar la transformaci\'on. Ver figura \ref{fig9}.\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
n.spot <- global.norm(mySpot = Simon)
ri.plot(n.spot)
@
\caption{Gr\'afica R vs I de lo datos bajo la normalizaci\'on global.\label{fig9}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> n.spot <- global.norm(mySpot = Simon)
> ri.plot(n.spot)
\end{Scode}
\begin{Soutput}
  Argumentos: Un objeto de la clase spot al cual se le va a 
  aplicar la transformcai\'on.
  Resultado: Un objeto de la clase spot con la normalizaci\'on 
  global de sus datos.
\end{Soutput}

En los ejemplos anteriores, el n\'umero de spots en el microarreglo Simon es peque\~no, por esta raz\'on las gr\'aficas correspondientes (Ver figuras \ref{fig8} y \ref{fig9}), son muy similares, aunque no sucede lo mismo al aplicar estas funciones en los datos de otros microarreglos.\\

\subsubsection{Filtrado}

El filtrado de algunos datos es un paso importante en el an\'alisis de los datos. Existe una funci\'on en genArise que implementa el algoritmo descrito por John Quackenbush\footnote[2]{ John Quackenbush \textquotedblleft Microarray data normalization and transformation\textquotedblright. Nature Genetics. Vol.32 supplement pp 496-501 (2002)} y tiene el nombre \texttt{filter.spot}. Despu\'es de aplicar esta funci\'on sobre los datos, el resultado ser\'a un  nuevo objeto de la clase Spot  que contiene \'unicamente los datos de cada spot  en donde el valor de las intensidades es significativamente diferente, estad\'{\i}sticamente  hablando, al valor que posee el backgound correspondiente.\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
f.spot <- filter.spot(mySpot = Simon)
ri.plot(f.spot)
@
\caption{Gr\'afica R vs I despu\'es del filtrado. \label{fig10}}	
\end{center}
\end{figure}

\begin{Scode}
> data(Simon)
> f.spot <- filter.spot(mySpot = Simon)
> ri.plot(f.spot)
\end{Scode}

\begin{Soutput}
Argumentos: Esta gfunci\'on recibe como argumento un objeto de la 
clase Spot.
Resultado: Un objeto de la clase Spot despu\'es de aplicar la funci\'on 
del filtrado.
\end{Soutput}

\subsubsection{Eliminaci\'on de duplicados}

Otro paso del an\'alisis es la eliminaci\'on de los datos que tienen el identificador duplicado. genArise cuenta con la funci\'on \texttt{spotUnique} que calcula la media geom\'etrica de los duplicados para promediar los valores. De esta manera, los valores ajustados para cada gen pueden ser usados para llevar a cabo fases posteriores del an\'alisis. Ver figura \ref{fig11}\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
u.spot <- spotUnique(mySpot = Simon)
ri.plot(u.spot)
@
\caption{Gr\'afica R vs I de los datos despu\'es de ejecutar \texttt{spotUnique}. \label{fig11}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> u.spot <- spotUnique(mySpot = Simon)
> ri.plot(u.spot)
\end{Scode}

\begin{Soutput}
Argumentos: Un objeto de la clase Spot al cual se le aplicar\'a la transformaci\'on.
Resultado: Un objeto de la clase spot sin duplicados.
\end{Soutput}

Como una alternativa, genArise cuenta con otra funci\'on para la eliminaci\'on de duplicados diferente a la descrita anteriormente. Esta otra funci\'on se llama \texttt{alter.unique} y si se tienen dos elementos duplicados saca el valor R de cada uno de ellos pero solo conserva la informaci\'on del elemento en donde el valor absoluto de R es mayor. Los duplicados que tienen un valor R positivo y uno negativo son eliminados. Es claro que al utilizar esta funci\'on se conservar\'an m\'as datos que utilizando la funci\'on \texttt{spotUnique}, de la misma manera, es probable, que el n\'umero de datos sobreexpresados o subexpresados sea mayor  pues se est\'an conservan los valores extremos. Ver figura \ref{fig12}\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
u.spot <- alter.unique(mySpot = Simon)
ri.plot(u.spot)
@
\caption{Gr\'afica R vs I despu\'es de ejecutar \texttt{alter.unique}. \label{fig12}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> u.spot <- alter.unique(mySpot = Simon)
> ri.plot(u.spot)
\end{Scode}

\begin{Soutput}
Argumentos: Un objeto de la clase Spot
Resultado: Un objeto de la clase Spot sin duplicados.
\end{Soutput}

genArise cuenta tambi\'en con otra funci\'on para la eliminaci\'on de duplicados cuyo nombre es \texttt{meanUnique}, esta funci\'on obtiene la media (promedio) de los valores de los duplicados. Pero esta funci\'on no solo conserva un elemento por cada id repetido en el arreglo, tambi\'en elimina aquellos datos en donde la diferencia, entre los valores R de los datos duplicados, es mayor al 20\%. Ver figura \ref{fig13}\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(Simon)
u.spot <- meanUnique(mySpot = Simon)
ri.plot(u.spot)
@
\caption{Gr\'afica R vs I despu\'es de ejecutar \texttt{meanUnique}.\label{fig13}}
\end{center}
\end{figure}
\begin{Scode}
> data(Simon)
> u.spot <- meanUnique(mySpot = Simon)
> ri.plot(u.spot)
\end{Scode}

\begin{Soutput}
Argumentos: Un objeto de la clase Spot
Resultado: Un objeto de la clase Spot sin duplicados
\end{Soutput}

\subsection{Zscore}

El enfoque que utilizamos requiere calcular la media y la desviaci\'on est\'andar de la distribuci\'on de los valores $log_2$(ratio) as\'{\i} como definir un rango de confianza, para esto utilizamos la funci\'on \texttt{Zscore}. En una gr\'afica R vs I esto se ve representado como l\'{\i}neas horizontales paralelas, los genes que se encuentren fuera de esas l\'{\i}neas, estar\'an diferencialmente expresados (sobre o sub expresados)\footnotemark[2]. Ver figura \ref{fig14}.\\

genArise ofrece dos opciones para realizar este an\'alisis, trabajando con los valores R e I o trabajando con los valore M y A. Para seleccionar alguna de estas dos opciones, solo se debe especificar el valor correspondiente en el argumento adecuado.\\

Esta funci\'on recibe como argumento un objeto de la clase Spot, pero regresa un objeto de otra clase denominada \texttt{DataSet}, los objetos de la clase DataSet no pueden ser utilizados en las funciones descritas anteriormente.\\

Por ejemplo:\\

\begin{Scode}
> data(Simon)
> s.spot <- Zscore(Simon, type="ri")
\end{Scode}

\begin{Soutput}
  Argumentos: Un objeto de la clase Spot y el tipo de valores con los que 
  trabajara la funcion
  Resultado: Un objeto de la clase DataSet
\end{Soutput}

\subsubsection{Graficando dataSets}

Debido a que los objetos de la clase \texttt{DataSet} spon diferentes a los objetos que pertenecen a la clase Spot, se necesitan funciones para graficar los datos que contienen. En genArise se encuentra una funci\'on llamada \texttt{Zscore.plot}, la cual grafica los datos en conjuntos de colores. Los colores dependen del valor absoluto del zscore (x) que tenga cada punto: x < 1 (verde), 1 < x < 1.5 (azul), 1.5 < x < 2 (cyan) y si x > 2 (blanco). Ver figura \ref{fig14}. Para mayores detalles sobre esta funci\'on, refi\'erase al manual genArise.pdf.\\

\begin{figure}[h]
\begin{center}
<<fig=TRUE, echo=FALSE>>=
data(WT.dataset)
Zscore.plot(WT.dataset) #Zscore.min = 1)
@
\caption{Data after Z-score Analysis. \label{fig14}}
\end{center}
\end{figure}
\begin{Scode}
> data(WT.dataset)
> Zscore.plot(WT.dataset)
\end{Scode}

\begin{Soutput}
  Argumentos: Un objeto de la clase DataSet
  Resultado: Grafica de colores en base a los datos de la 
  funcion Zscore
\end{Soutput}

\subsection{GenMerge}

Despu\'es de haber obtenido los valores del z-score mediante la funci\'on \texttt{Zscore}, podemos obtener conjuntos de genes subexpresados o sobreexpresados, \'estos pueden ser conjuntos de genes para ejecutar la funci\'on \texttt{genMerge}.\\

La funci\'on \texttt{genMerge} devuelve informaci\'on funcional para cada gen y provee de un rango estad\'{\i}stico para los genes que se encuentren sobrerepresentados en ese conjunto de datos. Esta funci\'on est\'a completamente basada en el software \texttt{GeneMerge} desarrollado por Cristian I. Castillo-Davis y Daniel L. Hartl \footnote[3]{Cristian I. Castillo-Davis, Department of Statistics, Harvard University \url{http://www.oeb.harvard.edu/hartl/lab/publications/GeneMerge}}\\

Esta funci\'on recibe como par\'ametros la ubicaci\'on de cuatro archivos. El formato de cada uno de ellos esta restringido para que la funci\'on se ejecute correctamente. A continuaci\'on se describe el formato de cada uno de ellos.\\

\textbf{Association file}. Este archivo contiene dos columnas separadas por un tabulador, la primera corresponde al identificador del gen y la segunda a la lista de identificadores de GeneOntology \url{http://geneontology.org}(de aqui en adelante denominados GO). Cada GO en esta lista esta separado por \texttt{;} y es necesario consultar la base de datos para asociar cada GO con un gen.\\

Por ejemplo:

\begin{Scode}
YAL001C GO:0003709;
YAL002W GO:0005554;
YAL003W GO:0003746;
YAL005C GO:0003754;GO:0003773;GO:0004002;
YAL007C GO:0005554;
\end{Scode}

\textbf{Description file}. Este archivo tambi\'en contiene dos columnas separadas por un tabulador, la primera corresponde a un GO y la segunda a la descripci\'on asociada a cada GO en el archivo.\\

Por ejemplo:

\begin{Scode}
GO:0000005      ribosomal chaperone activity
GO:0000006      high affinity zinc uptake transporter activity
GO:0000007      low-affinity zinc ion transporter activity
GO:0000008      thioredoxin
GO:0000009      alpha-1,6-mannosyltransferase activity
GO:0000010      trans-hexaprenyltranstransferase activity
GO:0000014      single-stranded DNA specific endodeoxyribonuclease activity
GO:0000016      lactase activity
\end{Scode}

\textbf{All genes (population.genes)}. Este archivo consta, \'unicamente, de una columna. Cada rengl\'on en el archivo es el identificador de un gen en el microarreglo. Todos los identificadores del arreglo original deber\'an estar presentes en este archivo.\\

Por ejemplo:

\begin{Scode}
YAL001C
YAL002W
YAL003W
YAL004W
YAL005C
YAL007C
YAL008W
YAL009W
YAL010C
YAL011W
\end{Scode}

\textbf{The genes to study}. Esta archivo tambi\'en consta de una sola columna y cada rengl\'on es tambi\'en un identificador de alg\'un gen en el microarreglo, la diferencia con el anterior es que en este archivo solo van a estar los identificadores de los genes que se encuentran en el conjunto a ser estudiado (sobreexpresados o subexpresados)\\

\subsection{Usando genMerge}

Si solo se tienen objetos y se desea ejecutar la funci\'on \texttt{genMerge}, es necesario escribir los identificadores en un archivo, para ello se debe hacer lo siguiente:\\

Para escribir en archivo los identificadores de los genes de un objeto de la clase Spot:\\

\begin{Scode}
> # aqui estamos suponiendo que los datos del arreglo original 
> # estan guardados en el objeto de la clase Spot o.spot
>
> # Para escribir el archivo population se debe usar la 
> # funcion write.table
>
> ids <- attr(o.spot, "spotData")\$Ids
> ids <- unique(ids)
> write.table(ids, "population.genes")
\end{Scode}

\begin{Soutput}
  Resultado: Un archivo con el nombre population.genes que 
  contiene los identificadores 
\end{Soutput}

Para escribir el archivo que contiene los identificadores de los genes del conjunto que va a ser estudiado, se debe utilizar la misma funci\'on \texttt{write.table} una vez que se hayan separado los datos relacionados a dicho conjunto. Los otros archivos se pueden construir consultando una base de datos o descarg\'andolos de Internet, pero debe mantener el formato descrito anteriormente. La sintaxis de la funci\'on \texttt{genMerge} es la siguiente:

\begin{Scode}
> genMerge(gene.association, description, population.genes,
  study.genes, output.file = "GeneMerge.txt"){
\end{Scode}

\begin{Soutput}
  Argumentos: El nombre de los archivos correspondientes y el 
  nombre del archivo en donde se escribiran el resultado de 
  la funcion

  Resultado: Un archivo con los resultados hechos por la 
  funci\'on genMerge.
\end{Soutput}

\subsection{Post-an\'alisis}

Existe otra funci\'on de genArise que nos permite hacer un an\'alisis combinatorio de conjuntos entre los resultados obtenidos de diferentes proyectos. Esta funci\'on recibe el nombre de \texttt{post.analysis} y debe ser utilizada solo para comparar proyectos en los cuales se haya ejecutado la operaci\'on \texttt{Zscore}. Es importante mencionar que esta funci\'on recibe como par\'ametro una lista de archivos con extensi\'on \texttt{prj}, por lo que no va a poder ser utilizada si los resultados a comparar no se han obtenido mediante la interfaz gr\'afica de genArise.\\

La funci\'on \texttt{post.analysis} recibe como argumento una lista de proyectos y busca los archivos \texttt{zscore.txt} que corresponden a cada proyecto de la lista.  Una vez que se hayan localizado los respectivos archivos \texttt{zscore.txt} se va a obtener una lista de identificadores para cada proyecto bajo el siguiente criterio: todos los identificadores que aparezcan en la lista de cada proyecto, debe tener un valor zscore dentro del rango definido, tambi\'en, en los argumentos de la funci\'on.\\

Una vez obtenida la lista de identificadores por cada uno de los proyectos, se crea, dentro de un directorio, una serie de archivos con extensi\'on \texttt{set} y cuyo nombre est\'a formado por secuencias de ceros y unos. El n\'umero de d\'{\i}gitos en el nombre de los archivos de salida es igual al n\'umero de proyectos que forman la lista que se pas\'o como argumento, es decir, existe una relaci\'on de los d\'{\i}gitos que conforman el nombre con los proyectos que forman la lista que se pas\'o como par\'ametro. La relaci\'on mencionada anteriormente est\'a definida de acuerdo a la posici\'on que se especifica en el archivo \texttt{order.txt}.\\

En cada uno de los archivos de salida se escribir\'an los identificadores que cumplen lo siguiente: est\'an presentes en todos los conjuntos pertenecientes a los proyectos que, de acuerdo al archivo \texttt{order.txt}, tienen un 1 en el d\'{\i}gito correspondiente en el nombre del archivo y  que, adem\'as, estos identificadores NO est\'an presentes en todos los conjuntos que corresponden a los dem\'as proyectos (identificados con un 0 en el nombre del archivo de salida).\\

Todos los archivos de salida ser\'an creados dentro de un directorio, cuyo nombre es otro par\'ametro de la funci\'on.\\


\section{La interfaz gr\'afica de genArise}

Para facilitar el an\'alisis, genArise re\'une las principales funciones para ser utilizadas por medio de una interfaz gr\'afica. Esta 
interfaz gr\'afica es deplegada escribiendo la siguiente funci\'on en la consola de R:

\begin{Scode}
> genArise()
\end{Scode}

Inmediatamente despu\'es se desplegar\'a en su pantalla el men\'u que se muestra en la figura \ref{fig15}.\\

\begin{figure}[h]
\begin{center}
\includegraphics[scale= 0.3]{./images/main.pdf}\\
\caption{Barra de men\'u principal de genArise\label{fig15}}
\end{center}
\end{figure}

En el men\'u principal (figura 15), se muestran dos opciones as\'{\i} como tambi\'en una barra de \'{\i}conos en donde cada uno realiza 
una de las funciones que ya est\'an inclu\'{\i}das en el men\'u. Dichas funciones son: \textbf{Crear un nuevo proyecto}, 
\textbf{Abrir un proyecto} y realizar un an\'alisis de conjuntos con la funci\'on \textbf{post.analysis} descrita en el apartado 
anterior.\\

Cada vez que el cursor del rat\'on sea colocado encima de alg\'un \'{\i}cono en la barra de men\'u principal, se desplegar\'a en el 
extremo derecho  una descripci\'on de la funci\'on correspondiente al \'{\i}cono. De aqu\'{\i} en adelante, cada \'{\i}cono en esta barra 
ser\'a identificado por esa descripci\'on.\\

Esta interfaz gr\'afica usa R TclTk, as\'{\i} que si se est\'a usando RGui en Windows, se puede notar f\'acilmente que la ventana principal de RGui frecuentemente se "interpone", por lo que las ventanas de genArise parecen ocultarse detr\'as de esta. Por este motivo, se recomienda evitar el RGui para la interfaz gr\'afica de genArise y ejecutar esta desde la Rterm (desde una ventana de MS-DOS).\\

\subsection{Crear un nuevo proyecto}

Para crear un nuevo proyecto, debe seguir la secuencia \textbf{File $\rightarrow$ Project $\rightarrow$ New Project} en el men\'u, o 
bien, dar click en el \'{\i}cono \textbf{Create a new Project}.\\

Aparecer\'a en pantalla la ventana descrita por la figura 16. En esta se muestran dos p\'aneles (Input y Output). En el primero se 
deber\'an especificar las caracter\'{\i}sticas del archivo a analizar como su ubicaci\'on, si proviene de la 
Unidad de Microarreglos del Instituto de Fisiolog\'{\i}a Celular (IFC), as\'{\i} como las dimensiones del microarreglo si \'este no 
fue desarrollado en \'este instituto.\\

 Cuando el archivo a analizar proviene del IFC deber\'a seleccionar la opci\'on \textbf{IFC} y las 
dimensiones del microarreglo se obtendr\'an autom\'aticamente, por ello las casillas de las dimensiones permanecer\'an deshabilitadas.\\

En las casillas etiquetadas con \textbf{Cy3}, \textbf{Cy5}, \textbf{BgCy3}, \textbf{BgCy5} y \textbf{Id}, se deber\'a indicar el n\'umero 
de la columna en el archivo que corresponda a la intensidad del Control, a la intensidad del experimento, background del Control, 
background del experimento y el identificador de los genes respectivamente.\\

En el panel inferior, en la casilla etiquetada con \textbf{Project Name} se debe especificar el nombre del nuevo proyecto. Esto 
simplemente crear\'a un archivo con extensi\'on prj y un directorio con el nombre especificado, en las dos casillas restantes se debe 
especificar el nombre de los subdirectorios del directorio anterior en donde se colocar\'an los archivos correspondientes a las 
gr\'afica \textbf{(Location for Plots)} y los archivos de resultados creados en el proceso de an\'alisis \textbf{(Location for Results)}. 
Para especificar el nombre de los subdirectorios simplememte basta con escribir el nombre (no la ruta completa);  sin embargo para 
especificar el nombre del nuevo proyecto es posible indicar la ruta exacta auxili\'andose del bot\'on \textbf{browse}.\\


\begin{figure}[h]
\begin{center}
\includegraphics[scale= 0.5]{./images/prjconfig.pdf}\\
\caption{Ventana para la configuraci\'on de un proyecto\label{fig16}}
\end{center}
\end{figure}

La figura \ref{fig16} muestra un analisis que se har\'a sobre el archivo Rat\_5k\_014.csv que contiene un microarreglo hecho en la 
Unidad de Microarreglos del Instituto de Fisiolog\'{\i} Celular. El proyecto se llama \textquotedblleft ProjectRat \textquotedblright.
Para \textbf{Location for Plots} y \textbf{Location for Results} dejaremos, en este ejemplo, los nombres que vienen predeterminados.\\

Despu\'es de dar click en el bot\'on Ok se despliega una ventada que muestra el grid principal en forma de gr\'afica, en una escala de
verde a rojo que representa el radio de intensidad de $log_2$ para cada spot en el arreglo (ver figura  \ref{fig17}). Es importante aclarar
que esta gr\'afica no reemplaza la imagen TIFF original del microarreglo.\\

\begin{figure}[h]
\begin{center}
\includegraphics[scale= 0.5]{./images/diagnosticplots.pdf}
\caption{Gr\'afica en escala verde a rojo \label{fig17}}
\end{center}
\end{figure}

Los niveles de verde y rojo se pueden ver en forma separada seleccionando la opci\'on correspondiente del panel en la parte inferior 
derecha de la ventana. Ver figuras \ref{fig18} y \ref{fig19}.\\

\begin{figure}[b]
\begin{center}
\includegraphics[height=3in,width=3.15in]{./images/diagnosticplotsRed.pdf}
\caption{Gr\'afica para la intensidad del background Cy3 \label{fig18}}
\end{center}
\end{figure}

\begin{figure}[h]
\begin{center}
\includegraphics[height=3in,width=3.15in]{./images/diagnosticplotsGreen.pdf}
\caption{Gr\'afica para la intensidad del background Cy5\label{fig19}}
\end{center}
\end{figure}

En el segundo panel, localizado en la parte superior derecha de la ventana, se pueden observar los atributos del archivo que 
esta siendo analizado y las configuraciones del experimento.\\

Se puede salvar la gr\'afica en un archivo pdf seleccionando la opcion \textbf{Save as PDF} en el menu Options o haciendo click en
el \'{\i}cono \textbf{Save graphic as PDF}. Con la opci\'on \textbf{Note} en el mismo men\'u o haciendo click en el \'{\i}cono 
\textbf{Notes about this experiment}, se despliega un editor de texto donde se pueden hacer algunas notas importantes durante el
an\'alisis y salvarlas en un archivo llamado notes.txt. Ver figura \ref{fig20}.\\

\begin{figure}[h]
\begin{center}
\includegraphics[scale= 0.3]{./images/emacsnotes.pdf}
\caption{Un editor para algunas notas\label{fig20}}
\end{center}
\end{figure}

En este momento se puede comenzar el an\'alisis haciendo click en el men\'u \textbf{Analyze} o en el \'{\i}cono de 
\textbf{Make analysis data}, el cual desplegar\'a la ventana mostrada en la figura \ref{fig21}\\

\begin{figure}[h]
\begin{center}
\includegraphics[scale= 0.3]{./images/messagewizard.pdf}
\caption{Pregunta sobre seguir el wizard\label{fig21}}
\end{center}
\end{figure}


Seleccionando la opci\'on \textbf{Yes} el programa ejecuta las operaciones en el siguiente orden:  background correction, lowess 
normalization, intensity-filter, replicates filtering. Una vez que este an\'alisis finaliza se observar\'a la siguiente ventana.
(Ver la figura \ref{fig22}).\\ 

\begin{figure}[h]
\begin{center}
\includegraphics[scale= 0.3]{./images/RvsInodupswizard.pdf}
\caption{Parte infeior de la ventana: historial del proyecto\label{fig22}}
\end{center}
\end{figure}

Esta ventana muestra la gr\'afica R -vs- I de los datos cuando el programa termina de ejecutar la \'ultima operaci\'on de la secuencia anterior. Ver figura \ref{fig22}. En el costado derecho de esta misma ventana se muestran cinco opciones que corresponden a las resultados de las operaciones realizadas a lo largo del an\'alisis, al seleccionar alguna de ellas se mostrar\'a en la ventana la gr\'afica de los datos obtenidos en dicho paso. \\

genArise permite escoger entre tres tipos de gr\'aficas a desplegar en pantalla (R -vs- I, M -vs- A o Cy3 -vs- Cy5), cada una de estas 
gr\'aficas se mostrar\'a al seleccionar la opci\'on adecuada del men\'u \textbf{Graphics} en la barra de men\'u.\\

Cada una de las ventanas de genArise en su parte inferior cuentan con un \'area en donde se escribe informaci\'on de cada una de las operaciones conforme se van ejecutando.\\

Es importante se\~nalar que cada vez que se ejecuta una operaci\'on, genArise guarda un archivo con los resultados de dicha operaci\'on en el subdirectorio destinado a los archivos resultantes del proyecto actual con un nombre asignado por default el cual no debe modificarse por ning\'un motivo, de lo contrario no se podr\'an consultar estos datos mediante la interfaz gr\'afica de genArise posteriormente.\\

En caso de haber seleccionado la opci\'on de no seguir el wizard para realizar el an\'alisis, solamente aparecer\'a en la ventana la opci\'on que corresponde a los datos en su estado original (sin hab\'ersele aplicado alguna operaci\'on), semejante a lo que se muestra en la figura \ref{fig23}. En este caso se pueden ejecutar las operaciones seleccionando la opci\'on deseada de la barra de men\'u, estas operaciones se ejecutar\'an sobre los datos de la opci\'on que se encuentre seleccionada en ese momento y aparecer\'a una nueva opci\'on del lado derecho de la ventana con la etiqueta correspondiente a la operaci\'on que se haya ejecutado.\\

\begin{figure}
\begin{center}
\includegraphics[scale= 0.3]{./images/nowizardoriginal.pdf}
\caption{Vantana para hacer el an\'alisis de los datos\label{fig23}}
\end{center}
\end{figure}

\subsubsection{Ventana del Zscore}

En el men\'u principal se muestra la opci\'on \textbf{Zscore} (ver figura \ref{fig24}) que permite ejecutar la operaci\'on descrita en la secci\'on \ref{sec1}. Al seleccionarla se desplegar\'a una nueva ventana con cuatro opciones, donde cada una grafica los datos en donde el valor del zscore se encuentra en el rango definido por la etiqueta de la opci\'on respectiva. Ver figura \ref{fig25}\\ 


\begin{figure}
\begin{center}
\includegraphics[scale= 0.3]{./images/zscoremenu.pdf}
\caption{Men\'u del Zscore\label{fig24}}
\end{center}
\end{figure}
\subsection{Abrir un proyecto}


\begin{figure}
\begin{center}
\includegraphics[scale= 0.3]{./images/allzscore.pdf}
\caption{Gr\'afica del Zscore\label{fig25}}
\end{center}
\end{figure}

Si se desea consultar los datos de alg\'un proyecto realizado anteriormente, es posible hacerlo con la opci\'on \textbf{Open project} del men\'u principal de genArise. Con esta opci\'on se debe seleccionar el archivo con extensi\'on prj que corresponda al proyecto deseado. Una vez hecho esto, aparecer\'a en pantalla una ventana en la que se pueden ver las gr\'aficas de los datos obtenidos durante el an\'alisis realizado en ese proyecto. Ver figura \ref{fig26}.\\

\begin{figure}
\begin{center}
\includegraphics[scale= 0.3]{./images/openprojectwindow.pdf}
\caption{Ventana que aparece al abrir un proyecto anterior\label{fig26}}
\end{center}
\end{figure}

\subsection{Ventana de Post-an\'alisis}

Esta ventana nos permite obtener la informaci\'on necesaria para poder utilizar la funci\'on \texttt{post.analysis} que fue descrita anteriormente. La lista de los proyectos se  elige en la parte derecha de la ventana. Se pueden seleccionar varios archivos con extensi\'on \texttt{prj} oprimiendo el bot\'on \textbf{Add}.\\

Los otros par\'ametros como, por ejemplo,  el directorio en d\'onde ser\'an colocados los resultados tambi\'en son seleccionados en esta ventana. Ver figura \ref{fig27}

\begin{figure}
\begin{center}
\includegraphics[scale = 1]{./images/postAnalysis.pdf}
\caption{Ventana de selecci\'on de argumentos de \texttt{post.analysis}\label{fig27}}
\end{center}
\end{figure}

\end{document}
